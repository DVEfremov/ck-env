#
# Collective Knowledge (individual environment - setup)
#
# See CK LICENSE.txt for licensing details
# See CK Copyright.txt for copyright details
#
# Developer: Grigori Fursin, Grigori.Fursin@cTuning.org, http://cTuning.org/lab/people/gfursin
#

##############################################################################
# setup environment setup

import sys
if sys.version_info[0]>2:
   def raw_input(i):
       return input(i)

def setup(i):
    """
    Input:  {
              cfg          - dict of the soft entry
              tags         - list of tags
              env          - environment
              deps         - resolved deps

              interactive  - if 'yes', ask questions

              (customize)  - external params for possible customization:

                             target_arm - if 'yes', target ARM
            }

    Output: {
              return       - return code =  0, if successful
                                         >  0, if error
              (error)      - error text if return > 0

              bat        - prepared string for bat file
            }

    """

    import os

    # Get variables
    s=''

    iv=i.get('interactive','')

    env=i.get('env',{})
    cfg=i.get('cfg',{})
    deps=i.get('deps',{})
    tags=i.get('tags',[])
    cus=i.get('customize',{})

    soft_name=i.get('soft_name','')

    host_d=i.get('host_os_dict',{})
    target_d=i.get('target_os_dict',{})
    winh=host_d.get('windows_base','')
    win=target_d.get('windows_base','')
    remote=target_d.get('remote','')
    mingw=target_d.get('mingw','')
    tbits=target_d.get('bits','')

    envp=cus.get('env_prefix','')
    pi=cus.get('path_install','')

    ############################################################
    pp='platforms'
    pt='toolchains'

    # Check if really Android NDK
    p1=os.path.join(pi, pp)
    p2=os.path.join(pi, pt)

    if not os.path.isdir(p1):
       return {'return': 1, 'error':'can\'t find "'+pp+'" directory in the installation path'}

    if not os.path.isdir(p2):
       return {'return': 1, 'error':'can\'t find "'+pt+'" directory in the installation path'}

    ############################################################
    # Ask a few more questions
    extra_path_configured=cus.get('add_extra_path_configured','')
    extra_path=cus.get('add_extra_path','')
    if extra_path_configured!='yes' and iv=='yes':
       if extra_path!='':
          ck.out('Current relative path to pre-built Android tools: '+extra_path)
       else:
          extra_path=raw_input('relative path to pre-built Android tools (such as prebuilt/linux-x86_64/bin) : ')
          cus['extra_path_configured']='yes'

    if extra_path!='':
       cus['add_extra_path']=extra_path
       cus['add_extra_path_configured']='yes'

    if extra_path!='':
       if winh=='yes':
          s+='\nset PATH='+pi+'\\'+extra_path+';%PATH%\n\n'
       else:
          s+='\nexport PATH='+pi+'/'+extra_path+':$PATH\n\n'

    ############################################################
    # Ask a few more questions
    toolchain_configured=cus.get('toolchain_configured','')
    toolchain=cus.get('toolchain','')
    if toolchain_configured!='yes' and iv=='yes':
       if toolchain!='':
          ck.out('Current relative path to toolchain: '+toolchain)
       else:
          toolchain=raw_input('relative path to pre-built compiler toolchain (such as arm-linux-androideabi-4.9/prebuilt/linux-x86_64) : ')
          cus['toolchain_configured']='yes'

    if toolchain!='':
       cus['add_toolchain']=toolchain
       cus['add_toolchain_configured']='yes'

    if toolchain!='':
       if winh=='yes':
          s+='\nset PATH='+pi+'\\'+toolchain+'\\bin;%PATH%\n\n'
       else:
          s+='\nexport PATH='+pi+'/'+toolchain+'/bin:$PATH\n\n'

    ############################################################
    prefix_configured=cus.get('tool_prefix_configured','')
    prefix=cus.get('tool_prefix','')
    if prefix_configured!='yes' and iv=='yes':
       if prefix!='':
          ck.out('Current compiler name prefix: '+prefix)
       else:
          prefix=raw_input('Compiler name prefix, if needed (such as aarch64-linux-android-): ')
          cus['tool_prefix_configured']='yes'

    if prefix!='':
       env['CK_COMPILER_PREFIX']=prefix
       cus['tool_prefix']=prefix
       cus['tool_prefix_configured']='yes'

    for k in env:
        v=env[k]
        v=v.replace('$#tool_prefix#$',prefix)
        env[k]=v

    ############################################################
    platform_configured=cus.get('platform_configured','')
    platform=cus.get('platform','')
    if platform_configured!='yes' and iv=='yes':
       if platform!='':
          ck.out('Current platform: '+platform)
       else:
          platform=raw_input('Enter platform (such as android-5) : ')
          cus['platform_configured']='yes'

    if platform!='':
       env['CK_ANDROID_PLATFORM']=platform
       cus['platform']=platform
       cus['platform_configured']='yes'

    if platform=='':
       return {'return':1, 'error':'platform is not defined'}

    ############################################################
    arch_configured=cus.get('arch_configured','')
    arch=cus.get('arch','')
    if arch_configured!='yes' and iv=='yes':
       if arch!='':
          ck.out('Current architecture for a platform: '+arch)
       else:
          arch=raw_input('Enter architecture for a platform (such as arch-arm) : ')
          cus['arch_configured']='yes'

    if arch!='':
       env['CK_PLATFORM_ARCH']=arch
       cus['arch']=arch
       cus['arch_configured']='yes'

    if arch=='':
       return {'return':1, 'error':'platform architecture is not defined'}

    ##############
    soft_name+=' ('+platform+' / '+arch+')'
    cus['soft_name']=soft_name

    if winh=='yes':
       sysroot='--sysroot "'+pi+'\\'+pp+'\\'+platform+'\\'+arch
    else:
       sysroot='--sysroot "'+pi+'/'+pp+'/'+platform+'/'+arch

    x=env.get('CK_COMPILER_FLAGS_OBLIGATORY','')
    if sysroot not in x:
       x=sysroot+' '+x
    env['CK_COMPILER_FLAGS_OBLIGATORY']=x

    x=env.get('CK_LD_FLAGS_EXTRA','')
    if sysroot not in x:
       x=sysroot+' '+x
    env['CK_LD_FLAGS_EXTRA']=x

    return {'return':0, 'bat':s, 'env':env, 'tags':tags, 'cus':cus}
